
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import static Interfaz.Ventana.output;
import java.awt.Color;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\004" +
    "\010\000\002\004\011\000\002\003\010\000\002\003\010" +
    "\000\002\003\011\000\002\003\011\000\002\003\011\000" +
    "\002\003\011\000\002\003\012\000\002\003\012\000\002" +
    "\003\003\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\015\006" +
    "\000\002\014\010\000\002\014\013\000\002\014\031\000" +
    "\002\014\035\000\002\014\041\000\002\014\045\000\002" +
    "\014\051\000\002\014\054\000\002\017\005\000\002\017" +
    "\006\000\002\017\006\000\002\017\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\024\000\002\006\007\000" +
    "\002\006\007\000\002\016\006\000\002\016\006\000\002" +
    "\010\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\017\004\001\002\000\006\013\010\026" +
    "\011\001\002\000\004\002\007\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\004\027\162\001" +
    "\002\000\004\021\ufff5\001\002\000\004\021\013\001\002" +
    "\000\004\023\014\001\002\000\004\033\016\001\002\000" +
    "\010\021\160\027\052\033\016\001\002\000\004\027\020" +
    "\001\002\000\004\011\074\001\002\000\006\013\021\016" +
    "\022\001\002\000\004\024\027\001\002\000\004\024\023" +
    "\001\002\000\004\027\024\001\002\000\006\013\025\016" +
    "\026\001\002\000\006\011\uffde\015\uffde\001\002\000\006" +
    "\011\uffe2\015\uffe2\001\002\000\004\027\030\001\002\000" +
    "\006\013\031\016\032\001\002\000\006\011\uffe1\015\uffe1" +
    "\001\002\000\010\011\uffdf\013\033\015\uffdf\001\002\000" +
    "\004\027\034\001\002\000\004\013\035\001\002\000\004" +
    "\030\036\001\002\000\004\012\037\001\002\000\004\015" +
    "\040\001\002\000\004\027\020\001\002\000\004\015\042" +
    "\001\002\000\004\027\043\001\002\000\004\013\070\001" +
    "\002\000\004\011\045\001\002\000\004\020\046\001\002" +
    "\000\006\027\052\033\016\001\002\000\004\021\ufff0\001" +
    "\002\000\004\021\ufff2\001\002\000\004\021\067\001\002" +
    "\000\004\013\056\001\002\000\010\021\ufff4\027\052\033" +
    "\016\001\002\000\004\021\ufff1\001\002\000\004\021\ufff3" +
    "\001\002\000\006\004\057\030\060\001\002\000\004\027" +
    "\064\001\002\000\004\027\062\001\002\000\004\021\uffef" +
    "\001\002\000\004\013\063\001\002\000\004\004\057\001" +
    "\002\000\004\013\065\001\002\000\004\015\066\001\002" +
    "\000\004\021\uffdb\001\002\000\006\011\uffe0\015\uffe0\001" +
    "\002\000\004\004\071\001\002\000\006\004\073\012\072" +
    "\001\002\000\004\011\uffdc\001\002\000\004\011\uffdd\001" +
    "\002\000\004\020\075\001\002\000\006\027\052\033\016" +
    "\001\002\000\004\021\077\001\002\000\012\021\uffee\027" +
    "\uffee\033\uffee\035\100\001\002\000\006\027\052\033\016" +
    "\001\002\000\004\021\102\001\002\000\012\021\uffed\027" +
    "\uffed\033\uffed\036\103\001\002\000\004\013\104\001\002" +
    "\000\004\027\105\001\002\000\004\013\106\001\002\000" +
    "\004\030\107\001\002\000\004\012\110\001\002\000\004" +
    "\015\111\001\002\000\004\027\020\001\002\000\004\015" +
    "\113\001\002\000\004\027\043\001\002\000\004\011\115" +
    "\001\002\000\004\020\116\001\002\000\006\027\052\033" +
    "\016\001\002\000\004\021\120\001\002\000\012\021\uffec" +
    "\027\uffec\033\uffec\037\121\001\002\000\006\012\122\027" +
    "\123\001\002\000\004\025\153\001\002\000\004\013\146" +
    "\001\002\000\004\011\125\001\002\000\004\015\126\001" +
    "\002\000\012\021\uffeb\027\uffeb\033\uffeb\040\127\001\002" +
    "\000\006\012\122\027\123\001\002\000\004\011\131\001" +
    "\002\000\004\015\132\001\002\000\012\021\uffea\027\uffea" +
    "\033\uffea\041\133\001\002\000\006\012\122\027\123\001" +
    "\002\000\004\011\135\001\002\000\004\015\136\001\002" +
    "\000\012\021\uffe9\027\uffe9\033\uffe9\042\137\001\002\000" +
    "\006\012\122\027\123\001\002\000\004\011\141\001\002" +
    "\000\004\015\142\001\002\000\012\021\uffe8\027\uffe8\033" +
    "\uffe8\043\143\001\002\000\004\011\144\001\002\000\004" +
    "\015\145\001\002\000\010\021\uffe7\027\uffe7\033\uffe7\001" +
    "\002\000\004\025\147\001\002\000\006\012\150\027\151" +
    "\001\002\000\004\011\uffe4\001\002\000\004\013\152\001" +
    "\002\000\004\011\uffe3\001\002\000\006\012\154\027\155" +
    "\001\002\000\004\011\uffe6\001\002\000\004\013\156\001" +
    "\002\000\004\011\uffe5\001\002\000\004\021\161\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffe\001\002\000" +
    "\006\013\163\016\164\001\002\000\004\030\177\001\002" +
    "\000\004\030\165\001\002\000\006\012\166\027\167\001" +
    "\002\000\004\015\175\001\002\000\006\013\170\016\171" +
    "\001\002\000\004\015\173\001\002\000\004\015\172\001" +
    "\002\000\004\021\ufff8\001\002\000\006\013\010\026\011" +
    "\001\002\000\004\021\ufff6\001\002\000\010\013\010\021" +
    "\ufffc\026\011\001\002\000\004\021\ufffa\001\002\000\006" +
    "\012\200\027\201\001\002\000\004\015\207\001\002\000" +
    "\006\013\202\016\203\001\002\000\004\015\206\001\002" +
    "\000\004\015\204\001\002\000\006\013\010\026\011\001" +
    "\002\000\004\021\ufff7\001\002\000\004\021\ufff9\001\002" +
    "\000\010\013\010\021\ufffd\026\011\001\002\000\004\021" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\004\004\005\001\001\000\004\003" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\014\001\001\000\014" +
    "\005\052\007\156\010\047\014\046\015\053\001\001\000" +
    "\004\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\040\001" +
    "\001\000\002\001\001\000\004\016\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\052\007\050\010\047\014\046\015\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\052\007\054\010\047\014\046\015\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\052\007\075" +
    "\010\047\014\046\015\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\052\007\100\010\047\014\046" +
    "\015\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\111\001\001\000\002\001\001\000\004\016\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\052\007" +
    "\116\010\047\014\046\015\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\173\001\001\000\002\001\001\000\004\003\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\207\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+columna);
        output.setForeground(Color.red);
        output.setText("! Error Sintactico Recuperado !"+"\nLexema: "+lexema+"\nLinea: "+(fila+1)+", Columna: "+columna);
        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        //System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 resultado=a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= begin E corderecho main I corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= begin E corderecho main I EXPRESION corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= letra declaracion letra asignacion numero delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= letra declaracion letranum asignacion numero delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= letra declaracion letra asignacion numero delimitador E 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= letra declaracion letranum asignacion numero delimitador E 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= letra declaracion letra asignacion declaracion letra delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= letra declaracion letranum asignacion declaracion letranum delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= letra declaracion letra asignacion declaracion letranum delimitador E 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= letra declaracion letranum asignacion declaracion letra delimitador E 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= F EXPRESION 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= ASIGNA 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNA ::= declaracion letra asignacion R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho palabraROTATE COM parc delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-26)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho palabraROTATE COM parc delimitador palabraMOVE_H COM parc delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-30)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho palabraROTATE COM parc delimitador palabraMOVE_H COM parc delimitador palabraMOVE_C COM parc delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-34)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho palabraROTATE COM parc delimitador palabraMOVE_H COM parc delimitador palabraMOVE_C COM parc delimitador palabraMOVE_M COM parc delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-38)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= palabraIF CONDICION parc corizquierdo EXPRESION corderecho palabraELSE EXPRESION corderecho palabraFOR letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho palabraROTATE COM parc delimitador palabraMOVE_H COM parc delimitador palabraMOVE_C COM parc delimitador palabraMOVE_M COM parc delimitador palabraACTION parc delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-41)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COM ::= numero coma numero 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COM",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COM ::= numero coma declaracion letra 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COM",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COM ::= declaracion letra coma numero 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COM",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COM ::= declaracion letra coma declaracion letra 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COM",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= declaracion letranum condiciones declaracion letranum 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= declaracion letra condiciones declaracion letra 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= declaracion letra condiciones declaracion letranum letra declaracion letra asignacion numero delimitador CONDICION delimitador INCREMENTO parc corizquierdo EXPRESION corderecho 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= declaracion letra condiciones declaracion letranum 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= declaracion letranum condiciones declaracion letra 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INCREMENTO ::= declaracion letra mas mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INCREMENTO ::= declaracion letra mas numero 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // R ::= declaracion letra mas declaracion letra delimitador 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
